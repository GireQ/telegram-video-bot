import os
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
HF_API_URL = "https://video-analyzer-bot.hf.space/analyze"

async def analyze_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùóÔ∏è–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É —Ç–∞–∫: /analyze <YouTube URL>")
        return

    video_url = context.args[0]
    await update.message.reply_text(f"üé¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {video_url}...")

    try:
        response = requests.post(HF_API_URL, data={"url": video_url})
        result = response.json()

        caption = f"üìå *{result.get('title', '–í–∏–¥–µ–æ')}*\n\n"
        caption += f"üß† *–û–ø–∏—Å–∞–Ω–∏–µ:* {result.get('description', '–ù–µ—Ç')}\n\n"
        caption += f"üéôÔ∏è *–†–µ—á—å:* {result.get('transcript', '')[:400]}...\n\n"
        caption += f"üñºÔ∏è *–í–∏–∑—É–∞–ª—å–Ω—ã–π –æ–±–∑–æ—Ä:* {result.get('visual_summary', '')[:400]}..."

        await update.message.reply_photo(
            photo=result.get("thumbnail"),
            caption=caption,
            parse_mode="Markdown"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:\n{e}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("analyze", analyze_video))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
